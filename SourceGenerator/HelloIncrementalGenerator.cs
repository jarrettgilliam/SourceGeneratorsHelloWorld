namespace SourceGenerator;

using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

[Generator(LanguageNames.CSharp)]
public sealed class HelloIncrementalGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<IMethodSymbol> provider = context.SyntaxProvider
            .CreateSyntaxProvider(SyntacticPredicate, SemanticTransform)
            .Where(static symbol => symbol is not null)
            .Select((symbol, _) => symbol!);

        context.RegisterSourceOutput(provider, Execute);
    }

    private static bool SyntacticPredicate(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        return syntaxNode is MethodDeclarationSyntax candidate &&
               !candidate.Modifiers.Any(SyntaxKind.PartialKeyword) &&
               candidate.Modifiers.Any(SyntaxKind.StaticKeyword);
    }

    private static IMethodSymbol? SemanticTransform(GeneratorSyntaxContext context, CancellationToken cancellationToken)
    {
        Debug.Assert(context.Node is MethodDeclarationSyntax);
        var candidate = Unsafe.As<MethodDeclarationSyntax>(context.Node);

        IMethodSymbol? symbol = context.SemanticModel.GetDeclaredSymbol(candidate, cancellationToken);

        if (symbol is not null && symbol.Name == "Main")
        {
            return symbol;
        }

        return null;
    }

    private static void Execute(SourceProductionContext context, IMethodSymbol mainMethod)
    {
        // lang=C#
        string source = $$"""
            // <auto-generated/>

            namespace {{mainMethod.ContainingNamespace.ToDisplayString()}};

            public static partial class {{mainMethod.ContainingType.Name}}
            {
                static void HelloFrom(string name) =>
                    global::System.Console.WriteLine($"Generator says: Hi from '{name}'");
            }
            """;

        string hintName = string.Join(
            ".",
            mainMethod.ContainingNamespace.ToDisplayString(),
            mainMethod.ContainingType.Name,
            "g.cs");

        context.AddSource(hintName, source);
    }
}