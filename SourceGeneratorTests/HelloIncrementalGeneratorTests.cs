namespace SourceGeneratorTests;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using SourceGenerator;

public class HelloIncrementalGeneratorTests
{
    [Fact]
    public void Generator_AddsPartialMethod()
    {
        string userCode = """
            namespace ConsoleApp;

            public static partial class Program
            {
                private static void Main()
                {
                    HelloFrom("Generated Code");
                }
            }
            """;

        string expectedHintName = "ConsoleApp.Program.g.cs";
        string expectedGeneratedCode = """
            // <auto-generated/>

            namespace ConsoleApp;

            public static partial class Program
            {
                static void HelloFrom(string name) =>
                    global::System.Console.WriteLine($"Generator says: Hi from '{name}'");
            }
            """;

        var result = RunGenerator<HelloIncrementalGenerator>(userCode);

        Assert.Collection(
            result.Results.Single().GeneratedSources,
            r =>
            {
                Assert.Equal(expectedHintName, r.HintName);
                Assert.Equal(expectedGeneratedCode, r.SourceText.ToString());
            });
    }

    private static GeneratorDriverRunResult RunGenerator<T>(string code)
        where T : IIncrementalGenerator, new()
    {
        var compilation = CSharpCompilation.Create("InMemoryUnitTestProject",
            new[] { CSharpSyntaxTree.ParseText(code) },
            Basic.Reference.Assemblies.Net70.References.All,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        IIncrementalGenerator generator = new T();
        ISourceGenerator sourceGenerator = generator.AsSourceGenerator();

        // trackIncrementalGeneratorSteps allows to report info about each step of the generator
        GeneratorDriver driver = CSharpGeneratorDriver.Create(
            generators: new ISourceGenerator[] { sourceGenerator },
            driverOptions: new GeneratorDriverOptions(default, trackIncrementalGeneratorSteps: true));

        driver = driver.RunGenerators(compilation);

        return driver.GetRunResult();
    }
}